;This consolidates all the exercises from 2.1.4 at http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-14.html#%_sec_2.1.4

;Common code
(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))

(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

;Exercise 2.7.  Alyssa's program is incomplete because she has not specified the implementation of the interval abstraction. Here is a definition of the interval constructor:

(define (make-interval a b) (cons a b))

;Define selectors upper-bound and lower-bound to complete the implementation.

(define (bound selector segment)
  (let ((x (car segment))
        (y (cdr segment)))
    (selector x y)))

(define (upper-bound segment)
  (bound max segment))

(define (lower-bound segment)
  (bound min segment))

;Exercise 2.8.  Using reasoning analogous to Alyssa's, describe how the difference of two intervals may be computed. 
;Define a corresponding subtraction procedure, called sub-interval.