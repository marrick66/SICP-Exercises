;Exercise 3.51.  In order to take a closer look at delayed evaluation, we will use the following procedure, which simply returns its argument after printing it:

(define (show x)
  (display-line x)
  x)

;What does the interpreter print in response to evaluating each ;expression in the following sequence?59

(define x (stream-map show (stream-enumerate-interval 0 10)))
(stream-ref x 5)
(stream-ref x 7)

;The first stream-ref will display:
;1
;2
;3
;4
;5

;The second stream-ref will display:
;6
;7

;The reason is that although the stream starts at the beginning again, the already-run? value has already been set for the first five values, so the show procedure is not called, just the value is returned.  When we get to 6, the already-run? flag is not set, and the show procedure is called.